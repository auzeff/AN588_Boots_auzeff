---
title: "AN 588 Homework 5"
author: "Akiva Zeff"
format:
  html:
    toc : true
    toc-depth: 4
    toc-location: left
    toc-title: "Sections"
editor: visual
theme: journal
---

```{r}
# Loading the dataset
library(curl)
f <- curl("https://raw.githubusercontent.com/fuzzyatelin/fuzzyatelin.github.io/master/AN588_Fall23/KamilarAndCooperData.csv")
d <- read.csv(f, header = TRUE, sep = ",", stringsAsFactors = FALSE)
d <- data.frame(cbind(d$HomeRange_km2, d$Body_mass_female_mean)) # keeping only the relevant columns
names(d) <- c("HomeRange", "BodyMass_F")
d <- na.omit(d) # removing rows with NAs

d_log <- log(d) # making a log-transformed dataset
```

## 1. Linear regression

*Using the “KamilarAndCooperData.csv” dataset, run a linear regression looking at log(HomeRange_km2) in relation to log(Body_mass_female_mean) and report your* 𝛽 *coefficients (slope and intercept).*

```{r}
# Making the model
m <- lm(HomeRange ~ BodyMass_F, d_log)

# Reporting my 𝛽 values
betas <- as.list(coef(m)) # making a list of the values
names(betas) <- c("β0", "β1") # renaming the items in the list
betas
```

## 2. Bootstrapping

*Then, use bootstrapping to sample from your data 1000 times with replacement, each time fitting the same model and calculating the same coefficients. This generates a sampling distribution for each* 𝛽 *coefficient.*

```{r}
set.seed(123)  # setting a seed for reproducibility

nrows <- nrow(d_log) # it'll be convenient to have a variable with the number of rows in my dataset

betas_boot <- matrix(NA, nrow = 1000, ncol = 2) # setting up a dummy variable for storage

for (i in 1:1000) {
  
  # Sampling data with replacement
  indices <- sample(1:nrows, size = nrows, replace = TRUE)
  bootstrap <- d_log[indices, ]
  
  # Fitting the model
  m_boot <- lm(HomeRange ~ BodyMass_F, bootstrap)
  
  # Extracting the betas and storing them
  betas_boot[i, ] <- coef(m_boot)
}

colnames(betas_boot) <- c("β0", "β1") # fixing column names in betas matrix
```

*Estimate the standard error for each of your* 𝛽 *coefficients as the standard deviation of the sampling distribution from your bootstrap and determine the 95% CI for each of your* 𝛽 *coefficients based on the appropriate quantiles from your sampling distribution.*

```{r}
# Estimating SE
se <- apply(betas_boot, 2, sd)

# Estimating CI
ci <- apply(betas_boot, 2, function(x) quantile(x, probs = c(0.025, 0.975)))

# Combining the two
estimates <- data.frame(
  SE = se,
  CI_2.5 = ci[1, ],
  CI_97.5 = ci[2, ]
)

print(estimates)
```

*How does the former compare to the SE estimated from your entire dataset using the formula for standard error implemented in `lm()`?*

```{r}
# Finding SE estimates from lm()
summary(m)$coefficients
```

> The 𝛽 SE estimates are very similar to those from the `lm()` summary.

*How does the latter compare to the 95% CI estimated from your entire dataset?*

```{r}
confint(m) # defaults to 95% CI
```

> Again, the values are very similar.

## Extra credit

*Write a FUNCTION that takes as its arguments a dataframe, “d”, a linear model, “m” (as a character string, e.g., “logHR\~logBM”), a user-defined confidence interval level, “conf.level” (with default = 0.95), and a number of bootstrap replicates, “n” (with default = 1000). Your function should return a dataframe that includes: beta coefficient names; beta coefficients, standard errors, and upper and lower CI limits for the linear model based on your entire dataset; and mean beta coefficient estimates, SEs, and CI limits for those coefficients based on your bootstrap.*

```{r}
frog <- function(d, m, conf.level = 0.95, n = 1000) {
  
  # Entire dataset
    model <- lm(m, data = d)
    betas <- coef(model) # extracting betas
    se <- summary(model)$coefficients[, "Std. Error"] # SE estimate
    ci <- confint(model) # CI estimate
  
  # Bootstrapping
    nrows <- nrow(d)
    betas_boot <- matrix(NA, nrow = n, ncol = 2)
    for (i in 1:n) {
      # See above for annotation
      indices <- sample(1:nrows, size = nrows, replace = TRUE)
      bootstrap <- d[indices, ]
      m_boot <- lm(m, bootstrap)
      betas_boot[i, ] <- coef(m_boot)
    }
    
    means <- apply(betas_boot, 2, mean) # mean β values
    se_boot <- apply(betas_boot, 2, sd) # estimating SE
    ci_boot <- apply(betas_boot, 2, function(x) quantile(x, probs = c(0.025, 0.975))) # estimating CI

  # Combining everything into a dataframe
  data.frame(
    Coefficients = c("β0", "β1"),
    Values = betas,
    SEs = se,
    CI_2.5 = ci[1, ],
    CI_97.5 = ci[2, ],
    β_means = means,
    β_SEs = se_boot,
    β_CI_2.5 = ci_boot[1, ],
    β_CI_97.5 = ci_boot[2, ]
    )
}

frog(d_log, "HomeRange ~ BodyMass_F")
```
